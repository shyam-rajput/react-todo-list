{"ast":null,"code":"var _jsxFileName = \"E:\\\\reactjs\\\\shyamapp\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ToDoList from './ToDoList';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [inputList, setInputList] = useState('');\n  const [Items, setItems] = useState([]);\n  // Ab hame ek array chaiye jo apni state (value) ko change kar raha hai isleye hamne second useState Hook ka use kiya hai.\n  // iska matlab hai Items ke ander jo current data hai bho hai ek empty array, matlab Items ab ek array ban chuka hai.\n\n  const itemEvent = e => {\n    setInputList(e.target.value);\n  };\n  const listofItems = () => {\n    setItems(olditems => {\n      // useState([]) iske pass jo bhi data hai isko setItems access kar sakta hai is tarike se callback function me parameter pass karke, ab ye oldItems parameter, useState ke array ke pass jo bhi data hai usko access kar sakta hai.\n      return [...olditems, inputList]; // ...olditems me jo bhi data hai usko hamne new array me store kar liya or inputList ko bhi pass kar diya kyuki inputList ke pass current data hai. basically hamne setItems ko he array bana diya ab is setItems ka ye array wala data Items ke liye current data ho jaayega, or is Items par hamne map method call kara diya hai jisse ye data <li> list me add ho jaaye.\n      // setItmes or oldItems me purana wala data store hota rahega or jaise he inputList se new data aayega bho bhi isi setItems me store hoga or yahi Items ka current data hoga or jab koi  button par click karega to ham ye data map method ke thru <li> list me dika paayenge. Jaise jaise Items me new data add hota rahega wese wese map method ke thru ye data <li> me show ho jaayega. Basically ...oldItems  array me jo empty data tha bho jaise jaise inputList se new data aata rahega bho ...oldItems array me store hota rahega or yahi array  Items ke liye new array data hoga jispar hamne map method lagaya hai. Basically ...oldItems array new data aane ke baad empty nahi rahega.\n    });\n\n    setInputList(''); // isko empty karne se inputList bhi empty ho jaayega button par click karne ke baad, or button par click karne se input field se purana wala text automatcally remove ho jaayega jisse ham new text type kar paayenge.\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center_div\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ToDo Lists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Add a Items\",\n          onChange: itemEvent,\n          value: inputList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: listofItems,\n          children: \" + \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: Items.map(itemval => {\n            return /*#__PURE__*/_jsxDEV(ToDoList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"rkRLrwVnMEEbSGnM8Q6fdlfQOg0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ToDoList","App","inputList","setInputList","Items","setItems","itemEvent","e","target","value","listofItems","olditems","map","itemval"],"sources":["E:/reactjs/shyamapp/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ToDoList from './ToDoList';\r\n\r\nconst App = () => {\r\n  const [inputList, setInputList] = useState('');\r\n  const [Items, setItems] = useState([]);\r\n  // Ab hame ek array chaiye jo apni state (value) ko change kar raha hai isleye hamne second useState Hook ka use kiya hai.\r\n  // iska matlab hai Items ke ander jo current data hai bho hai ek empty array, matlab Items ab ek array ban chuka hai.\r\n\r\n  const itemEvent = (e) => {\r\n    setInputList(e.target.value);\r\n  };\r\n\r\n  const listofItems = () => {\r\n    setItems((olditems) => {\r\n      // useState([]) iske pass jo bhi data hai isko setItems access kar sakta hai is tarike se callback function me parameter pass karke, ab ye oldItems parameter, useState ke array ke pass jo bhi data hai usko access kar sakta hai.\r\n      return [...olditems, inputList]; // ...olditems me jo bhi data hai usko hamne new array me store kar liya or inputList ko bhi pass kar diya kyuki inputList ke pass current data hai. basically hamne setItems ko he array bana diya ab is setItems ka ye array wala data Items ke liye current data ho jaayega, or is Items par hamne map method call kara diya hai jisse ye data <li> list me add ho jaaye.\r\n      // setItmes or oldItems me purana wala data store hota rahega or jaise he inputList se new data aayega bho bhi isi setItems me store hoga or yahi Items ka current data hoga or jab koi  button par click karega to ham ye data map method ke thru <li> list me dika paayenge. Jaise jaise Items me new data add hota rahega wese wese map method ke thru ye data <li> me show ho jaayega. Basically ...oldItems  array me jo empty data tha bho jaise jaise inputList se new data aata rahega bho ...oldItems array me store hota rahega or yahi array  Items ke liye new array data hoga jispar hamne map method lagaya hai. Basically ...oldItems array new data aane ke baad empty nahi rahega.\r\n    });\r\n\r\n    setInputList(''); // isko empty karne se inputList bhi empty ho jaayega button par click karne ke baad, or button par click karne se input field se purana wala text automatcally remove ho jaayega jisse ham new text type kar paayenge.\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main_div\">\r\n        <div className=\"center_div\">\r\n          <br />\r\n          <h1>ToDo Lists</h1>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add a Items\"\r\n            onChange={itemEvent}\r\n            value={inputList}\r\n          />\r\n          <button onClick={listofItems}> + </button>\r\n\r\n          <ol>\r\n            {Items.map((itemval) => {\r\n              return <ToDoList />;\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAAA;AAElC,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;;EAEA,MAAMO,SAAS,GAAIC,CAAC,IAAK;IACvBJ,YAAY,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,WAAW,GAAG,MAAM;IACxBL,QAAQ,CAAEM,QAAQ,IAAK;MACrB;MACA,OAAO,CAAC,GAAGA,QAAQ,EAAET,SAAS,CAAC,CAAC,CAAC;MACjC;IACF,CAAC,CAAC;;IAEFC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,UAAU;MAAA,uBACvB;QAAK,SAAS,EAAC,YAAY;QAAA,wBACzB;UAAA;UAAA;UAAA;QAAA,QAAM,eACN;UAAA,UAAI;QAAU;UAAA;UAAA;UAAA;QAAA,QAAK,eACnB;UAAA;UAAA;UAAA;QAAA,QAAM,eACN;UACE,IAAI,EAAC,MAAM;UACX,WAAW,EAAC,aAAa;UACzB,QAAQ,EAAEG,SAAU;UACpB,KAAK,EAAEJ;QAAU;UAAA;UAAA;UAAA;QAAA,QACjB,eACF;UAAQ,OAAO,EAAEQ,WAAY;UAAA,UAAC;QAAG;UAAA;UAAA;UAAA;QAAA,QAAS,eAE1C;UAAA,UACGN,KAAK,CAACQ,GAAG,CAAEC,OAAO,IAAK;YACtB,oBAAO,QAAC,QAAQ;cAAA;cAAA;cAAA;YAAA,QAAG;UACrB,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QACC;MAAA;QAAA;QAAA;QAAA;MAAA;IACD;MAAA;MAAA;MAAA;IAAA;EACF,iBACL;AAEP,CAAC;AAAC,GA5CIZ,GAAG;AAAA,KAAHA,GAAG;AA8CT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}